<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>
    <title>Sassij Tests</title>    
    <script language="javascript" src="jquery-1.3.1.min.js" type="text/javascript"></script>
    <script language="javascript" src="testrunner.js" type="text/javascript"></script>
    <script language="javascript" src="testnavigation.js" type="text/javascript"></script>
    <link media="screen" href="testsuite.css" type="text/css" rel="stylesheet"/>    
    <script language="javascript" src="testsetup.js" type="text/javascript"></script>
  </head>
  <body>
    <script language="javascript" type="text/javascript">

  module( "Node Tests" );
  
  beforeEach = function(){
    parentNode = new Node();
    previousSibling = new Node();
    testNode = new Node();
    nextSibling = new Node();
    childNode1 = new Node();
    childNode2 = new Node();
    childNode3 = new Node();
    parentNode
      .appendChild( previousSibling )
      .appendChild( testNode )
      .appendChild( nextSibling );
    testNode
      .appendChild( childNode1 )
      .appendChild( childNode2 )
      .appendChild( childNode3 );
  }
  
  test( "Node should have attributes like a DOM Node", function(){
    beforeEach();
    equals( testNode.childNodes[0], childNode1 );
    equals( testNode.firstChild, childNode1 );
    equals( testNode.lastChild, testNode.childNodes[2] );
    equals( testNode.previousSibling, testNode.parentNode.childNodes[0] );
    equals( testNode.nextSibling, testNode.parentNode.childNodes[2] );
    equals( testNode.nodeName, '#tree' );
    equals( testNode.nodeType, 'node' );
    equals( testNode.nodeValue, "Surprise!" );
    equals( testNode.parentNode, parentNode );
  });

  test( "Node should have methods like a DOM Node", function(){
    beforeEach();
    var fourthChild = new Node();
    equals( testNode.appendChild( fourthChild ) );
    equals( testNode.childNodes.length, 4 );
    same( testNode, testNode.cloneNode() );
    equals( testNode.hasChildNodes(), true );
    var fifthChild = new Node();
    testNode.insertBefore( fifthChild, fourthChild );
    equals( testNode.childNodes[3], fifthChild );
    equals( testNode.childNodes.length, 5 );
    equals( testNode.removeChild( fifthChild ), fifthChild );
    equals( testNode.childNodes.length, 4 );
    var thirdChild = testNode.childNodes[2];
    equals( thirdChild, testNode.childNodes[2].removeNode() );
    equals( testNode.childNodes.length, 3 );
    testNode.replaceChild( fourthChild, thirdChild );
    equals( testNode.lastChild, thirdChild );
  });

  test( "Node should be able to return just the last child", function(){
    beforeEach();
    testNode.setChildren( threeNewChildren );
    equals( testNode.getLastChild(), threeNewChildren[2] );
  });

  test( "NodeRule should render subchild attributes", function(){
    sassijsLine1 = new SassijsLine( '    #column.left', '  ', 15 );
    sassijsNode1 = sassijsLine1.determineNode();
    sassijsLine2 = new SassijsLine( ' :font-size 13px', '  ', 16 );
    sassijsNode2 = sassijsLine2.determineNode();
    sassijsNode1.appendChild( sassijsNode2 );
    sassijsLine3 = new SassijsLine( '  :color purple', '  ', 17 );
    sassijsNode3 = sassijsLine3.determineNode();
    sassijsNode1.appendChild( sassijsNode3 );
    equals( sassijsNode1.getCss(), '#column.left { font-size: 13px; color: purple }' );
  });

  test( "NodeRule should render subchild rules and attributes", function(){
    sassijsLine1 = new SassijsLine( '    #column.left', '  ', 15 );
    sassijsNode1 = sassijsLine1.determineNode();
    sassijsLine2 = new SassijsLine( ' :font-size 13px', '  ', 16 );
    sassijsNode2 = sassijsLine2.determineNode();
    sassijsNode1.appendChild( sassijsNode2 );
    sassijsLine3 = new SassijsLine( '  :color purple', '  ', 17 );
    sassijsNode3 = sassijsLine3.determineNode();
    sassijsNode1.appendChild( sassijsNode3 );
    sassijsLine4 = new SassijsLine( '    span.selected ', '  ', 18 );
    sassijsNode4 = sassijsLine4.determineNode();
    sassijsLine5 = new SassijsLine( ' border: none', '  ', 19 );
    sassijsNode5 = sassijsLine5.determineNode();
    sassijsNode4.appendChild( sassijsNode5 );
    sassijsNode1.appendChild( sassijsNode4 );
    
    // First let's just verify the tree structure that we expect.
    equals( sassijsNode1.getLine().getSyntax(), "#column.left" );
    equals( sassijsNode1.getChildren()[0].getLine().getSyntax(), ":font-size 13px" );
    equals( sassijsNode1.getChildren()[1].getLine().getSyntax(), ":color purple" );
    equals( sassijsNode1.getChildren()[2].getLine().getSyntax(), "span.selected" );
    equals( sassijsNode1.getChildren()[2].getChildren()[0].getLine().getSyntax(), "border: none" );

    equals( sassijsNode1.getCss().join( '\n' ), "#column.left { font-size: 13px; color: purple }\n#column.left span.selected { border: none }" );
  });
  
    </script>

    <h1></h1>
    <h2 id="banner"></h2>
    <ol id="tests"></ol>
    <div id="results"></div>
    <div id="main"></div>        

  </body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>
    <title>Sassij Tests</title>    
    <script language="javascript" src="../../jquery-1.3.1.min.js" type="text/javascript"></script>
    <script language="javascript" src="../../testrunner.js" type="text/javascript"></script>
    <script language="javascript" src="../../testnavigation.js" type="text/javascript"></script>
    <link media="screen" href="../../testsuite.css" type="text/css" rel="stylesheet"/>    
    <script language="javascript" src="../../testsetup.js" type="text/javascript"></script>
  </head>
  <body>
    <script language="javascript" type="text/javascript">

  // Some of these tests are adapted from haml/tests/sass/script_test.rb
  module( "Tree Node Tests" );
  
  beforeEach = function(){
    testNode = new SassijsTreeNode();
    childNode = new SassijsTreeNode();
    childNode1 = new SassijsTreeNode();
    childNode2 = new SassijsTreeNode();
    childNode3 = new SassijsTreeNode();
    threeNewChildren = [ childNode1, childNode2, childNode3 ];
  }
  
/*
  This is ruby-style String evaluation, so we'll come back to this.
  def test_interpolation
    assert_equal "foo bar baz bang", resolve('"foo #{"#{"ba" + "r"} baz"} bang"')
    assert_equal 'foo #{bar baz} bang', resolve('"foo \#{#{"ba" + "r"} baz} bang"')
    assert_equal 'foo #{baz bang', resolve('"foo #{"\#{" + "baz"} bang"')
  end

  def test_rule_interpolation
    assert_equal(<<CSS, render(<<SASS))
foo bar baz bang {
  a: b; }
CSS
foo \#{"\#{"ba" + "r"} baz"} bang
  a: b
SASS
    assert_equal(<<CSS, render(<<SASS))
foo \#{bar baz} bang {
  a: b; }
CSS
foo \\\#{\#{"ba" + "r"} baz} bang
  a: b
SASS
    assert_equal(<<CSS, render(<<SASS))
foo \#{baz bang {
  a: b; }
CSS
foo \#{"\\\#{" + "baz"} bang
  a: b
SASS
  end
*/

  test( "SassijTreeNode should be able to accept a new child", function(){
    beforeEach();
    testNode.appendChild( childNode );
    equals( testNode.getChildren()[0], childNode );
  });

  test( "SassijTreeNode should be able to mass-assign new children", function(){
    beforeEach();
    testNode.setChildren( threeNewChildren );
    equals( testNode.getChildren(), threeNewChildren );
  });

  test( "SassijTreeNode should be able to return just the last child", function(){
    beforeEach();
    testNode.setChildren( threeNewChildren );
    equals( testNode.getLastChild(), threeNewChildren[2] );
  });

  test( "SassijTreeNodeRule should render subchild attributes", function(){
    sassijsLine1 = new SassijsLine( '    #column.left', '  ', 15 );
    sassijsNode1 = sassijsLine1.determineNode();
    sassijsLine2 = new SassijsLine( ' :font-size 13px', '  ', 16 );
    sassijsNode2 = sassijsLine2.determineNode();
    sassijsNode1.appendChild( sassijsNode2 );
    sassijsLine3 = new SassijsLine( '  :color purple', '  ', 17 );
    sassijsNode3 = sassijsLine3.determineNode();
    sassijsNode1.appendChild( sassijsNode3 );
    equals( sassijsNode1.getCss(), '#column.left { font-size: 13px; color: purple }' );
  });

  test( "SassijTreeNodeRule should render subchild rules and attributes", function(){
    sassijsLine1 = new SassijsLine( '    #column.left', '  ', 15 );
    sassijsNode1 = sassijsLine1.determineNode();
    sassijsLine2 = new SassijsLine( ' :font-size 13px', '  ', 16 );
    sassijsNode2 = sassijsLine2.determineNode();
    sassijsNode1.appendChild( sassijsNode2 );
    sassijsLine3 = new SassijsLine( '  :color purple', '  ', 17 );
    sassijsNode3 = sassijsLine3.determineNode();
    sassijsNode1.appendChild( sassijsNode3 );
    sassijsLine4 = new SassijsLine( '    span.selected ', '  ', 18 );
    sassijsNode4 = sassijsLine4.determineNode();
    sassijsLine5 = new SassijsLine( ' border: none', '  ', 19 );
    sassijsNode5 = sassijsLine5.determineNode();
    sassijsNode4.appendChild( sassijsNode5 );
    sassijsNode1.appendChild( sassijsNode4 );
    
    // First let's just verify the tree structure that we expect.
    equals( sassijsNode1.getLine().getSyntax(), "#column.left" );
    equals( sassijsNode1.getChildren()[0].getLine().getSyntax(), ":font-size 13px" );
    equals( sassijsNode1.getChildren()[1].getLine().getSyntax(), ":color purple" );
    equals( sassijsNode1.getChildren()[2].getLine().getSyntax(), "span.selected" );
    equals( sassijsNode1.getChildren()[2].getChildren()[0].getLine().getSyntax(), "border: none" );

    equals( sassijsNode1.getCss().join( '\n' ), "#column.left { font-size: 13px; color: purple }\n#column.left span.selected { border: none }" );
  });
  
    </script>

    <h1>Tree Node Tests</h1>
    <h2 id="banner">
      <select id='test_select'></select>
    </h2>
    <ol id="tests"></ol>
    <div id="results"></div>
    <div id="main"></div>        

  </body>
</html>
